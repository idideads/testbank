// Code generated by sqlc. DO NOT EDIT.
// source: entries.sql

package db

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/idideads/simplebank/tool"
	"github.com/stretchr/testify/require"
)

func createfakeEntry(t *testing.T) Entry {
	refAccount := createFakeAccount(t)

	arg := CreateEntryParams{
		AccountID: refAccount.ID,
		Amount:    tool.RandomAmount(),
	}

	entry, err := testQueries.CreateEntry(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, entry)

	return entry
}

func TestQueries_CreateEntry(t *testing.T) {
	createfakeEntry(t)
}

func TestQueries_GetEntry(t *testing.T) {
	refEntry := createfakeEntry(t)

	entry, err := testQueries.GetEntry(context.Background(), refEntry.ID)
	require.NoError(t, err)
	require.NotEmpty(t, entry)

	require.Equal(t, refEntry.ID, entry.ID)
	require.Equal(t, refEntry.AccountID, entry.AccountID)
	require.Equal(t, refEntry.Amount, entry.Amount)
	require.WithinDuration(t, refEntry.CreatedAt, entry.CreatedAt, time.Second)
}

func TestQueries_UpdateEntry(t *testing.T) {
	refEntry := createfakeEntry(t)

	arg := UpdateEntryParams{
		ID:     refEntry.ID,
		Amount: tool.RandomAmount(),
	}

	entry, err := testQueries.UpdateEntry(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, entry)

	require.Equal(t, refEntry.ID, entry.ID)
	require.Equal(t, refEntry.AccountID, entry.AccountID)
	require.Equal(t, arg.Amount, entry.Amount)
	require.WithinDuration(t, refEntry.CreatedAt, entry.CreatedAt, time.Second)
}

func TestQueries_DeleteEntry(t *testing.T) {
	refEntry := createfakeEntry(t)

	err := testQueries.DeleteEntry(context.Background(), refEntry.ID)
	require.NoError(t, err)

	entry, err := testQueries.GetEntry(context.Background(), refEntry.ID)
	require.Error(t, err)
	require.EqualError(t, err, sql.ErrNoRows.Error())
	require.Empty(t, entry)
}

func TestQueries_ListEntries(t *testing.T) {
	for i := 0; i < 20; i++ {
		createfakeEntry(t)
	}

	arg := ListEntriesParams{
		Limit: 10,
		Offset: 5,
	}

	enties, err := testQueries.ListEntries(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, enties)
	require.Len(t, enties, 10)

	for _, entry := range enties {
		require.NotEmpty(t, entry)
	}
}
